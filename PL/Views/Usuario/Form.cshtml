@model ML.Usuario
@{
    ViewData["Title"] = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <p>Aqui podra actualizar o modificar los registros</p>

    <div class="row">
        <div class=" col-md-12">
            @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {

                <div class="form-horizontal">

                  <div class="form-group">
                    <div class="col-md">

                            @Html.LabelFor(model => model.IdUsuario, new { @class = "d-none" }) @*LabelFor hace referencia a una etiqueta con texto*@

                            @Html.TextBoxFor(model => model.IdUsuario, new { @class = "d-none" }) @*Crea una caja de texto con el nombre que le indiquemos  y con un valor por defecto en el segundo parámetro.*@

                            @Html.ValidationMessageFor(model => model.IdUsuario)

                    </div> @*IdUsuario*@

                     <p class="fs-4"> Datos del usuario </p>     @* DATOS DEL USUARIO*@

                     
                     <div class=" offset-md-12">

                                @Html.LabelFor(model=> model.Imagen)

                                <div class="input-group mb-3">
                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-card-image"></i></span>
                                    <input id="fileName" type='file' class="form-control" name="ImagenData" onchange="validateFileType(this), Previsualizar(this); " />
@*                                    <input type="file" name="ImagenData" id="fileName" onchange="validateFileType(this), Previsualizar(this);">*@
                                </div>

                                @if (Model.Imagen != null)
                                {

                                    <img id="Img" src="data:image/*;base64,@Model.Imagen" style="width:100px ; height:100px" />

                                }
                                else
                                {
                                    <img id="Img" src="~/Imagen/NoFoto.jpg" style="width:100px ; height:100px" />

                                }

                                @Html.ValidationMessageFor(model => model.Imagen)
                     </div>   @*Imagen*@
                            @Html.HiddenFor(model => model.Imagen) @*Para no perder la imagen*@

                     <div class="row">
                            <div class="col-md-3">

                                @Html.LabelFor(model => model.NombreUsuario)

                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-person-circle"></i></span>
                                    @Html.TextBoxFor(model => model.NombreUsuario, new { @class = "form-control", @id = "txtNombre", @onkeypress="return SoloLetras(event,'lblNombre')" })

                                    @Html.ValidationMessageFor(model => model.NombreUsuario)

                                </div>
                                @Html.Label("",null, new{@id="lblNombre"})
                            </div>   @*NombreUsuario*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ApellidoPaternoU)
                                <div class="input-group mb-3">

                                    @*<span class="input-group-text" id="basic-addon1"><i class="bi bi-person-circle"></i></span>*@
                                    @Html.TextBoxFor(model => model.ApellidoPaternoU, new { @class = "form-control", @id="txtApellidoP", @onkeypress="return SoloLetras(event,'lblApellidoP')" })

                                    @Html.ValidationMessageFor(model => model.ApellidoPaternoU)

                                </div>
                                @Html.Label("", null, new {@id="lblApellidoP"})

                            </div> @*ApellidoPaterno*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ApellidoMaternoU)
                                <div class="input-group mb-3">

                                    @*<span class="input-group-text" id="basic-addon1"><i class="bi bi-person-circle"></i></span>*@
                                    @Html.TextBoxFor(model => model.ApellidoMaternoU, new { @class = "form-control", @id="txtApellidoM", @onkeypress="return SoloLetras(event, 'lblApellidoM')" })
                                    
                                    @Html.ValidationMessageFor(model => model.ApellidoMaternoU)

                                </div>
                                @Html.Label("",null, new{@id="lblApellidoM"})
                            </div> @*ApellidoMaterno*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Curp)
                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-file-earmark-medical"></i></span>
                                    @Html.TextBoxFor(model => model.Curp, new { @class = "form-control", @id= "curp_input", oninput="validarInput(this)"})
                                    @*<pre id="resultado"></pre>*@
                                    @Html.ValidationMessageFor(model => model.Curp)

                                </div>
                                <pre id="resultado"></pre>
                            </div> @*Curp*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.FechaNacimiento)
                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar-week"></i></span>
                                    @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", @id="txtFechaNacimiento" })

                                    @Html.ValidationMessageFor(model => model.FechaNacimiento)

                                </div>

                            </div> @*FechaNacimiento*@
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Genero)
                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-gender-ambiguous"></i></span>
                                    @Html.Label("Femenino:") @Html.RadioButtonFor(model => model.Genero,"F")
                                    @Html.Label("Masculino:") @Html.RadioButtonFor(model => model.Genero,"M")

                                    @Html.ValidationMessageFor(model => model.Genero)

                                </div>

                            </div> @*Genero*@

                     </div>

                        @*CAMPOS DE DIRECCION*@
                     <div class="row">

                            <div class="col-md-3">
                                @*@Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais)*@
                                @Html.Label("Pais")
                                
                                <div class="input-group md-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-globe-americas"></i></span>

                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "NombrePais"), "Selecciona una opcion", new{@class = "form-control",id= "ddlPais"})
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais)

                                </div>

                            </div>    @*Pais*@

                            <div class="col-md-3">
                                @*@Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Estados)*@
                                @Html.Label("Estado")
                                <div class="input-group">

                                    @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Seleciona un grupo", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })

                                    }

                                    else
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "NombreEstado"), "Seleciona un grupo", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado)*@
                                    }
                                </div>
                            </div>      @*Estado*@

                            <div class="col-md-3">
                                @*@Html.LabelFor(model => model.Direccion.Colonia.Municipio.Municipios)*@
                                @Html.Label("Municipio")
                                <div class="input-group">

                                    @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Seleciona un grupo", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio)*@
                                    }

                                    else
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "NombreMunicipio"), "Seleciona un grupo", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio)*@
                                    }

                                </div>
                            </div>     @*Municipio*@

                            <div class="col-md-3">
                                @*@Html.LabelFor(model => model.Direccion.Colonia.Colonias)*@
                                @Html.Label("Colonia")
                                <div class="input-group">
                                    @if (Model.Direccion.Colonia.Colonias == null)
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Seleciona un grupo", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia)*@
                                    }

                                    else
                                    {
                                        @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "NombreColonia"), "Seleciona un grupo", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                                        @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia)*@
                                    }

                                </div>
                            </div>     @*Colonia*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.Calle)
                                <div class="input-group">
                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-geo-alt"></i></span>

                                    @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control", @id = "txtCalle", @onkeypress="return SoloLetras(event,'lblCalle')" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Calle)

                                </div>
                                 @Html.Label("", null, new{@id="lblCalle"})
                            </div>  @*Calle*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.NumeroInterior)
                                <div class="input-group">

                                    @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", @id = "txtNumI", @onkeypress="return SoloNumeros(event,'lblNumI')" })
                                    @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior)
                                </div>
                                @Html.Label("",null, new {@id="lblNumI"})
                            </div>  @*Numero Interior*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.NumeroExterior)
                                <div class="input-group">

                                    @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control", @id = "txtNumE", @onkeypress="return SoloNumeros(event,'lblNumE')" })
                                    @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior)
                                </div>
                                @Html.Label("",null, new {@id="lblNumE"})
                            </div>  @*Numero Exterior*@

                            <div class="col-md-3">
                                @Html.LabelFor(model => model.Direccion.IdDireccion, new { @class = "d-none" }) @*LabelFor hace referencia a una etiqueta con texto*@

                                <div class="input-group">

                                    @Html.TextBoxFor(model => model.Direccion.IdDireccion, new { @class = "d-none" }) @*Crea una caja de texto con el nombre que le indiquemos  y con un valor por defecto en el segundo parámetro.*@
                                    @Html.ValidationMessageFor(model => model.Direccion.IdDireccion)

                                </div>

                            </div>    @*IdDireccion*@


                     </div>


                      @* DATOS DEL CONTACTO *@
                      <p class="fs-4">Datos de contacto</p>

                      <div class="row">

                          <div class="col-md-3">

                                @Html.LabelFor(model => model.Telefono)

                                <div class="input-group md-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-telephone"></i></span>
                                    @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @id="txtTelefono", @onkeypress="return SoloNumeros(event,'lblTelefono')"})

                                    @Html.ValidationMessageFor(model => model.Telefono)

                                </div>
                                @Html.Label("",null, new {@id="lblTelefono"})

                            </div>  @*Telefono*@

                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Celular)

                                <div class="input-group md-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-phone"></i></span>
                                    @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", @id="txtCelular", @onkeypress="return SoloNumeros(event, 'lblCelular')"})

                                    @Html.ValidationMessageFor(model => model.Celular)
                                </div>
                                @Html.Label("",null, new {@id="lblCelular"})
                            </div>  @*Celular*@
                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Email)

                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-envelope-at"></i></span>
                                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id="txtEmail", onchange="ValidateEmailId()" })
                                    @Html.ValidationMessageFor(model => model.Email)

                                </div>
                            </div>  @*Email*@
                                                      
                      </div>

                      @*SEGURIDAD Y USERNAME *@
                       <p class="fs-4">Seguridad</p>

                      <div class="row">

                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Password)

                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-person-fill-lock"></i></span>
                                    @Html.TextBoxFor(model => model.Password, new { @class = "form-control" , @type = "password", @id="txtPassword", @placeholder="Password", @name="confpass"})

                                    @Html.ValidationMessageFor(model => model.Password)

                                </div>
                                @Html.TextBoxFor(model => model.Password, new {@class = "form-control", @type = "password", @id="txtConfirmPassword", @placeholder="Confirm Passward", @name="confpass"})
                                @Html.LabelFor(model => model.Password, new {@class = "registrationFormAlert", @type = "password", @id="CheckPasswordMatch"})
                            </div>  @*Password*@
                            
                            <div class="col-md-3">

                                @Html.LabelFor(model => model.UserName)

                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-person-bounding-box"></i></span>
                                    @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.UserName)

                                </div>

                            </div>  @*UserName*@

                            <div class="col-md-3">

                                @Html.LabelFor(model => model.Rol.IdRol)

                                <div class="input-group mb-3">

                                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-ui-checks-grid"></i></span>
                                    @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "NombreRol"), "Seleccione un rol", new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.Rol.IdRol)

                                </div>

                            </div>  @*Rol*@
                            
                      </div>


                        <div class="form-group">

                            <div class="col-md-3">

                                <input type="submit" value="Guardar" class="btn btn-success" />
                                @*Se crea el boton de guardar*@

                                @*  @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })
                            Se crea el boton de regresar se regresa al metodo GetAll en el controlador de usuario*@
                            </div>
                        </div>     @*Boton*@


                  </div>
                </div>
             }
         </div>
    </div>




              
            
</div>


@section Scripts
{
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/resources/demos/style.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.js"></script>
    

    <script type="text/javascript">
        $(document).ready(function () {
            $("#ddlPais").change(function () {
                $("#ddlEstado").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetEstado")',
                    dataType: 'json',
                    data: { IdPais: $("#ddlPais").val() },
                    success: function (estados) {
                        $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(estados, function (i, estados) {
                            $("#ddlEstado").append('<option value="'
                                + estados.idEstado + '">'
                                + estados.nombreEstado + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            })
        })
    </script> @*Estado*@ 

    <script type="text/javascript">
        $(document).ready(function () {
            $("#ddlEstado").change(function () {
                $("#ddlMunicipio").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMunicipio")',
                    dataType: 'json',
                    data: { IdEstado: $("#ddlEstado").val() },
                    success: function (municipios) {
                        $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                        $.each(municipios, function (i, municipios) {
                            $("#ddlMunicipio").append('<option value="'
                                + municipios.idMunicipio + '">'
                                + municipios.nombreMunicipio + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed.' + ex);
                    }
                });
            })
        })
    </script>  @*Municipio*@
    
    <script type="text/javascript">
    $(document).ready(function () {
        $("#ddlMunicipio").change(function () {
            $("#ddlColonia").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetColonia")',
                                        dataType: 'json',
                data: { IdMunicipio: $("#ddlMunicipio").val() },
                success: function (colonias) {
                    $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(colonias, function (i, colonias) {
                        $("#ddlColonia").append('<option value="'
                            + colonias.idColonia + '">'
                            + colonias.nombreColonia + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        })
    })
    </script>@*Colonia*@

    <script type="text/javascript">
    function Previsualizar(input) 
    {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#Img').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);


        }
    }  /*Previsualizar la imagen*/

    function validateFileType() {
        var fileName = document.getElementById("fileName").value;
        var idxDot = fileName.lastIndexOf(".") + 1;
        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
        if (extFile == "jpg" || extFile == "jpeg" || extFile == "png") {
                    //TO DO
        } else {
              alert("Solo archivos jpg/jpeg y png son aceptados");
                }
    }  /*Validar el tipo de imagen*/


    function SoloNumeros(e, controlId) {
            var caracter = e.key;
            if (!/^[0-9]/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan numeros");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
    } /*Validar solo numeros*/

    function SoloLetras(e, controlId) {
            var caracter = e.key;
            if (!/^[a-zA-Z]/g.test(caracter)) {
                $('#' + controlId).text("Solo se aceptan letras");
                $('#' + controlId).css({ "color": "red" });
                return false;
            }
            else {
                $('#' + controlId).text("");
                return true;
            }
        } /*Validar solo letras*/


       
        function checkPasswordMatch() {
            var password = $("#txtPassword").val();
            var confirmPassword = $("#txtConfirmPassword").val();
            if (password != confirmPassword)
                $("#CheckPasswordMatch").html("Las contraseñas no coinciden!");
            else
                $("#CheckPasswordMatch").html("La contraseña coincide!");
        }
        $(document).ready(function () {
            $("#txtConfirmPassword").keyup(checkPasswordMatch);
        }); /*Validar contraseña*/



    </script>   @*Funciones de validacion *@


    <script>
    function ValidateEmailId() {
    var regex = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    var value = $("#txtEmail").val();
    var status = ValidateRegeex(regex, value);
    if (status == true) {
        //alert("Direccion de correo valida");
    } else {
                alert("Ingrese una direccion de correo valida");
    }
}

        function ValidateRegeex(regex, value) {
            var expre = new RegExp(regex);
            return expre.test(value);
        }
</script> @*Validad Email*@

    <script>
        //Función para validar una CURP
        function curpValida(curp) {
            var re = /^([A-Z][AEIOUX][A-Z]{2}\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d])(\d)$/,
                validado = curp.match(re);

            if (!validado)  //Coincide con el formato general?
                return false;

            //Validar que coincida el dígito verificador
            function digitoVerificador(curp17) {
                //Fuente https://consultas.curp.gob.mx/CurpSP/
                var diccionario = "0123456789ABCDEFGHIJKLMNÑOPQRSTUVWXYZ",
                    lngSuma = 0.0,
                    lngDigito = 0.0;
                for (var i = 0; i < 17; i++)
                    lngSuma = lngSuma + diccionario.indexOf(curp17.charAt(i)) * (18 - i);
                lngDigito = 10 - lngSuma % 10;
                if (lngDigito == 10) return 0;
                return lngDigito;
            }

            if (validado[2] != digitoVerificador(validado[1]))
                return false;

            return true; //Validado
        }


        //Handler para el evento cuando cambia el input
        //Lleva la CURP a mayúsculas para validarlo
        function validarInput(input) {
            var curp = input.value.toUpperCase(),
                resultado = document.getElementById("resultado"),
                valido = "No válido";

            if (curpValida(curp)) { // ⬅️ Acá se comprueba
                valido = "Válido";
                resultado.classList.add("ok");
            } else {
                resultado.classList.remove("ok");
            }

            resultado.innerText = "CURP: " + curp + "\nFormato: " + valido;
        }
    </script>

    <script type="text/javascript">
        $(function () {
            $("#txtFechaNacimiento").datepicker({
                dateFormat: 'dd-mm-yy',
                changeMonth: true,
                changeYear: true,
                yearRange:"1930:2050"
            });
        });
    </script>@*Agregar Calendario*@
                       


}

